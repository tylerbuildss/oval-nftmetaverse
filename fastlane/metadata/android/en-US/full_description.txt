use anchor_lang::prelude::*;

declare_id!("Oval111111111111111111111111111111111111111");

#[program]
pub mod oval_nft {
    use super::*;

    pub fn mint_nft(ctx: Context<MintNFT>, uri: String, metadata: Metadata) -> Result<()> {
        let nft = &mut ctx.accounts.nft;
        nft.owner = *ctx.accounts.owner.key;
        nft.uri = uri;
        nft.metadata = metadata;
        Ok(())
    }
}

#[derive(Accounts)]
pub struct MintNFT<'info> {
    #[account(init, payer = owner, space = 1024)]
    pub nft: Account<'info, NFT>,
    #[account(mut)]
    pub owner: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[account]
pub struct NFT {
    pub owner: Pubkey,
    pub uri: String,
    pub metadata: Metadata,
}

#[derive(AnchorSerialize, AnchorDeserialize, Clone)]
pub struct Metadata {
    pub name: String,
    pub description: String,
    pub attributes: Vec<String>,
}
